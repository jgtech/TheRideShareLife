{"EDITOR_STATE":{"allProjectFiles":{"508166b0-9146-484e-a3fc-27e3c771c546":{"id":"508166b0-9146-484e-a3fc-27e3c771c546","parent":null,"name":"TheRideShareLife","type":"DIRECTORY","isDirectory":true,"children":["348544d3-18a1-4f63-a30c-030cca1a515f"],"isRemovable":false,"filePath":"TheRideShareLife"},"348544d3-18a1-4f63-a30c-030cca1a515f":{"id":"348544d3-18a1-4f63-a30c-030cca1a515f","parent":"508166b0-9146-484e-a3fc-27e3c771c546","name":"lambda.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"TheRideShareLife/lambda.js","code":"let AWS = require('aws-sdk');\nconst ddb = new AWS.DynamoDB.DocumentClient();\nconst s3 = new AWS.S3();\nexports.handler = function(event, context, callback) {\n\n\n\tcallback(null,'Successfully executed');\ns3.listObjects({\n    'Bucket': 'flights-raw-json',\n    'MaxKeys': 10,\n    'Prefix': ''\n}).promise()\n    .then(data => {\n        console.log(data);           // successful response\n        /*\n        data = {\n         Contents: [\n            {\n               ETag: \"\\\\\"70ee1738b6b21e2c8a43f3a5ab0eee71\\\\\"\",\n               Key: \"example1.jpg\",\n               LastModified: <Date Representation>,\n               Owner: {\n                  DisplayName: \"myname\",\n                  ID: \"12345example25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc\"\n               },\n               Size: 11,\n               StorageClass: \"STANDARD\"\n            },\n            {...}\n        */\n    })\n    .catch(err => {\n        console.log(err, err.stack); // an error occurred\n    });\nddb.put({\n                TableName: 'Flights',\n                Item: {'':''}\n            }, function(err,data){if(err){\n//handle error\n}else{\n//your logic goes here\n}});\n}","triggers":[],"version":3}},"rootNode":"508166b0-9146-484e-a3fc-27e3c771c546","openFiles":["348544d3-18a1-4f63-a30c-030cca1a515f"],"currentFileId":"348544d3-18a1-4f63-a30c-030cca1a515f","resources":{"s3flightsRawJson":{"name":"s3flightsRawJson","type":"S3","config":{"mode":1,"bucket":{"region":"us-west-2","name":"flights-raw-json"}},"globallyEditable":false},"ddbFlights":{"name":"ddbFlights","type":"DynamoDB","config":{"mode":1,"operation":"put","table":{"arn":"arn:aws:dynamodb:us-west-2:187266241960:table/Flights","name":"Flights","partitionKey":"AirportCode","partitionKeyType":"S","hasSortKey":false,"sortKey":"","sortKeyType":"S","mode":1},"parameters":{"Key":{},"Item":{"":""},"ExpressionAttributeValues":{}},"validator":{"validatableFields":{},"validity":true},"valid":true},"globallyEditable":false}},"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"slappforge-sdk":{"name":"@slappforge/slappforge-sdk","version":"0.0.3","notRemovable":true,"types":"\n                    declare class RDSQueryParams {\n    instanceIdentifier: string;\n    query: string;\n    inserts: Array<any>\n}\n\ndeclare namespace SL.AWS {\n    class RDS {\n        query(params: RDSQueryParams, callback: Function, connection: any): void;\n\n        beginTransaction(params: any, callback: Function): void;\n    }\n\n    class SQS {\n        receiveAndDeleteMessages(params: any, filteringCallBack: Function, deleteCallBack: Function, errorCallBack: Function): void;\n    }\n}\n"}}},"lambdaId":"348544d3-18a1-4f63-a30c-030cca1a515f","additionalFiles":[]},"PROJECT_META":{"projectName":"TheRideShareLife","projectDescription":"","projectVersion":"1.0.0","projectRegion":"us-west-2","repoName":"TheRideShareLife","repoUrl":"https://github.com/jgtech/TheRideShareLife","lastSave":1519422047365}}